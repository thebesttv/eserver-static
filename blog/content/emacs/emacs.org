#+title: Emacs
#+date: <2022-11-26 Sat 14:36>
#+author: thebesttv

[[info:emacs#Repetition]]

* Input

Typing the help character (=C-h= or =<F1>=) after a prefix key displays
a list of the commands starting with that prefix.  The sole exception to
this rule is =<ESC>=: =<ESC> C-h= is equivalent to =C-M-h=
(=mark-defun=).  You can, however, use =<F1>= instead: =<ESC> <F1>=
displays a list of commands starting with =<ESC>=.

* Mode line

The format of mode line is specified by =mode-line-format=:
#+begin_src elisp
  (setq mode-line-format
        '("%e"
          mode-line-front-space           ; " "
          mode-line-mule-info             ; multilingual info
          mode-line-client
          mode-line-modified
          mode-line-remote
          mode-line-frame-identification
          mode-line-buffer-identification
          "   "
          mode-line-position
          (vc-mode vc-mode)
          "  "
          mode-line-modes
          mode-line-misc-info
          mode-line-end-spaces))
#+end_src

** End-of-line format

Four variables control how EOL format is displayed in mode line:
- =eol-mnemonic-unix=: UNIX-like format (LF), initially ":"
- =eol-mnemonic-dos=: DOS-like format (CRLF), initially "(DOS)"
- =eol-mnemonic-mac=: MAC-like format (CR), initially "(Mac)"
- =eol-mnemonic-undecided=: displayed when end-of-line format is not yet
  determined, initially ":"

* Minibuffer

To insert a newline in minibuffer, use either =C-o= (=open-line=) or
=C-q C-j= (which inserts a literal =C-j= character, aka. line feed, LF).

** Completion

Inside a minibuffer, =<TAB>=, =?=, and =<SPC>= are often bound to
“completion commands”.
- =<TAB>= tries its best to complete, and display possible completions on failure.
- =?= only displays possible candidate.
- =<SPC>= only completes one word at a time, and will not work when the
  argument often contains spaces, e.g. when entering a file name.

When faced with long lists of possible completions, use =C-M-v=
(=scroll-other-window=) to scroll down that window.  =M-<PageUp>= and
=M-<PageDown>= will also work.

Also, typing =M-v= (=switch-to-completions=) inside a minibuffer
displays and *selects* the window showing the completion list.  That is,
unlike =C-M-v= which scrolls some other window, =M-v= will (1) display
the completion window if it does not already exist, and (2) select that
window.  In that window (in =completion-list-mode=):
- =n= (=next-completion=) and =p= (=previous-completion=) moves forward
  and backward
- =<RET>= selects the completion at point
- =q= (=quit-window=) quits the window and returns to the minibuffer
  (this does not kill the buffer)
- =z= (=kill-current-buffer=) kills the buffer and deletes the window
  (this does not return to minibuffer)

** History

Emacs keeps separate history lists for several different kinds of
arguments.  For example, there is a list for file names, used by all the
commands that read file names.  Other history lists include buffer
names, command names (used by =M-x=), and command arguments (used by
commands like =query-replace=).

*** Incremental search through history

#+begin_quote
If an incremental search fails in the minibuffer, it tries searching the
minibuffer history.  You can visualize the minibuffer and its history as
a series of pages, with the earliest history element on the first page
and the current minibuffer on the last page.  A forward search, =C-s=,
searches forward to later pages; a reverse search, =C-r=, searches
backwards to earlier pages.  Like in ordinary buffer search, a failing
search can wrap around, going from the last page to the first page or
vice versa.
---[[info:emacs#Isearch Minibuffer][15.1.7 Searching the Minibuffer]]
#+end_quote

In short, =C-r= searches backwards in time, finding the most recent
match.

* Character

- =C-x == (=what-cursor-position=) :: Describes the character at point,
  showing its code (in octal, decimal, and hex), name, position, etc.

* Point

Each *window* has its own point.  Even if multiple windows are
displaying the same buffer, each one can have a different value of
point.

** Navigation

- forward & backward
  - =C-f=, =C-b= moves forward/backward one *character*
  - =M-f=, =M-b= moves forward/backward one *word*
  - =M-a=, =M-e= moves forward/backward one *sentence*
- up & down
  - =C-n=, =C-p= moves up/down one line
- beginning & the end
  - =C-a=, =C-e= moves to the beginning/end of the current line
  - =M-<=, =M->= ... of the current buffer
- =M-r= (=move-to-window-line-top-bottom=) moves point to the
  center-most line of the window (or to the top/bottom-most line, on
  subsequent consecutive invocations).

  A numeric argument says which *screen line* to place point on,
  counting downward from the top of the window (zero means the top
  line).  A negative argument counts lines up from the bottom (−1 means
  the bottom line).

  This command is like =C-l=, but instead of scrolling the window to
  position the current line at center/top/bottom, it *moves point* to
  the center/top/bottom of the current window.  To summarize, =C-l=
  moves the window while =M-r= moves the point.

* Killing text

- =C-d= deletes forward one character
- =M-d= deletes forward one word
- =<BACKSPACE>= deletes backward one character
- =M-<BACKSPACE>= deletes backward one word

* Input

** =C-x 8= prefix command

A few common Unicode characters can be inserted via prefix command =C-x
8= (use =C-x 8 C-h= or =C-x 8 <f1>= for the whole list):
- quotes & brackets
  - =C-x 8 [= inserts =‘= (U+2018 LEFT SINGLE QUOTATION MARK)
  - =C-x 8 ]= inserts =’= (U+2019 RIGHT SINGLE QUOTATION MARK)
  - =C-x 8 {= inserts =“= (U+201C LEFT DOUBLE QUOTATION MARK)
  - =C-x 8 }= inserts =”= (U+201D RIGHT DOUBLE QUOTATION MARK)
  - =C-x 8 <= inserts =«=
  - =C-x 8 >= inserts =»=
- upside-down symbols
  - =C-x 8 != inserts =¡=
  - =C-x 8 ?= inserts =¿=
- others
  - =C-x 8 += inserts =±=
  - =C-x 8 .= inserts =·=
  - =C-x 8 Y= inserts =¥= (e.g. 1024¥)
  - =C-x 8 o= inserts =°= (e.g. 18C°)
- arrows
  - =C-x 8 a <= inserts =←= (same as =\gets= in Org mode: \gets)
  - =C-x 8 a >= inserts =→= (same as =\to= in Org mode: \to)
  - =C-x 8 a == inserts =↔=
- math symbols
  - =C-x 8 _ <= inserts =≤=
  - =C-x 8 _ >= inserts =≥=
  - =C-x 8 / == inserts =≠=
  - =C-x 8 x= inserts =×=
  - =C-x 8 / /= inserts =÷=
- fractions
  - =C-x 8 1 / 2= inserts =½=
  - =C-x 8 1 / 4= inserts =¼=
  - =C-x 8 3 / 4= inserts =¾=

Alternatively, you can use =C-x 8 <RET>= (=insert-char=).  This prompts
for the Unicode name or hexadecimal code-point of a character.  For
example, =C-x 8 <RET> left single quotation mark= and =C-x 8 <RET> 2018=
is the same as =C-x 8 [=, all producing =‘=.

Another way to input quotations is to use [[#electric-quote-mode][electric quote mode]].

* Indentation

* Minor modes

** Overwrite mode

** Auto fill mode

split lines automatically when they get too long

** Visual line mode

enables “word wrapping”: instead of wrapping long lines exactly at the
right window edge, Emacs wraps them *at the word boundaries*.

Commands such as =C-a=, =C-n=, =C-k= are also redefined so they operate
on screen lines rather than logical lines.

** Electric quote mode
:PROPERTIES:
:CUSTOM_ID: electric-quote-mode
:END:

In this mode, =`= is automatically converted to =‘=, ='= to =’=, =``= to
=“=, and =''= to =”=.

Side note: Org mode has a similar feature called "smart quote" (see
variable =org-export-with-smart-quotes=), which automatically converts
double quotes in the form ="..."= to =“...”=.  However, single quotes
are only converted when they are *nested inside double quotes*, e.g.
#+begin_quote
This say that: "single quote 'would only look normally' when nested
inside a double quote."
#+end_quote
See [[https://lists.gnu.org/archive/html/emacs-orgmode/2015-10/msg00174.html][the mail list]] for more information about nested single quotes.

** Repeat mode

#+begin_quote
Also you can activate ‘repeat-mode’ that temporarily enables a transient
mode with short keys after a limited number of commands.  Currently
supported shorter key sequences are ‘C-x u u’ instead of ‘C-x u C-x u’
to undo many changes, ‘C-x o o’ instead of ‘C-x o C-x o’ to switch
several windows, ‘C-x { { } } ^ ^ v v’ to resize the selected window
interactively, ‘M-g n n p p’ to navigate ‘next-error’ matches, and ‘C-x
] ] [ [’ to navigate through pages.  Any other key exits transient mode
and then is executed normally.  The user option ‘repeat-exit-key’
defines an additional key to exit this transient mode.  Also it’s
possible to break the repetition chain automatically after some idle
time by customizing the user option ‘repeat-exit-timeout’ to specify the
idle time in seconds after which this transient mode will be turned off.
#+end_quote
